- name: Remove existing containers [if exists] 
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - lnmp_mysql
    - lnmp_nginx
     
- name: Cleanup old data volume data [if exists]
  file: path=/tmp/lnmp/mysql-data state=absent
  # become: True
  # become_user: root

- name: Create data volume
  file: path="{{ mysql_data_path }}" state=directory

- name: Do the lnmp images exist
  docker_image_facts:
    name:
      - lnmp_mysql:v1
      - lnmp_nginx:v1
    debug: "{{ playbook_debug }}"
  register: image_facts

- debug: var=image_facts
  when: playbook_debug

- name: Build the mysql image
  docker_image:
    path: "{{ role_path }}/files/mysql"
    name: lnmp_mysql
    tag: v1
  register: output

- debug: var=output
  when: playbook_debug

- assert:
    that: not output.changed
  when: image_facts.images | length == 2

- name: Build the nginx image
  docker_image:
    path: "{{ role_path }}/files/nginx"
    name: lnmp_nginx
    tag: v1
  register: output

- debug: var=output
  when: playbook_debug

- name: Image build should be idempotent
  assert:
    that: not output.changed
  when: image_facts.images | length == 2

- name: Start mysql container
  docker_container:
    name: lnmp_mysql
    detach: yes
    volumes:
      - "{{ mysql_data_path }}:/var/lib/mysql"
    image: lnmp_mysql:v1
    debug: "{{ playbook_debug }}"
    ports:
      - 3306:3306
    recreate: yes
  register: output

- debug: var=output
  when: playbook_debug

- name: set a fact for the mysql container IP
  set_fact:
    mysqlip: "{{ ansible_docker_container['NetworkSettings']['IPAddress'] }}"

- name: Wait for mysqld to start
  local_action: wait_for port=3306 host="{{ mysqlip }}" timeout=60
  when: output.changed

- name: Wait for the petstore db to be created
  shell: mysql -h "127.0.0.1" -u petstore -predhat12345 -D petstore -e 'show tables'
  register: tables
  until: "tables.rc == 0"
  retries: 10
  delay: 5
  changed_when: false

- name: Create nginx volumes
  file: path="{{ nginx_data_path }}" state=directory

- name: Create nginx container
  docker_container:
    name: lnmp_nginx
    image: lnmp_nginx:v1
    ports:
      - 0.0.0.0:80:80
    volumes:
        - "{{ nginx_data_path }}:/var/log/nginx"
    links:
      - lnmp_mysql:lnmp_mysql
    debug: "{{ playbook_debug }}"
  register: output

- debug: var=output
  when: playbook_debug

- name: Get the nginx IP
  set_fact:
    nginx_ip: "{{ ansible_docker_container['NetworkSettings']['IPAddress'] }}"

- name: Create the temp dir for data
  file: path="{{ temp_data_path }}" state=directory

- name: Wait for nginx to start
  local_action: wait_for port=80 host="{{ nginx_ip }}" timeout=60

- name: Verify the nginx container is listening on port 80
  get_url: 
    url: "{{ 'http://' + nginx_ip }}"
    dest: "{{ temp_data_path }}/index.html"
    force: yes
  changed_when: false
  register: html  

- debug: var=html
  when: playbook_debug

- name: Get the database test page
  get_url: 
    url: "{{ 'http://' + nginx_ip + '/dbtest.php' }}"
    dest: "{{ temp_data_path }}/dbtest.php"
    force: yes
  changed_when: false
  register: html  

- set_fact:
    htmlexpected: 'Name: Puffball'
    htmlcontent: "{{ lookup('file', temp_data_path + '/dbtest.php') }}"

- name: Validate the content of the dbtest
  assert:
    that:
        - "htmlcontent == htmlexpected"

